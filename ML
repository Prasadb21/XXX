1st:

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a00c5ce7",
   "metadata": {},
   "source": [
    "# LP3 Group B Assignment 1\n",
    "\n",
    "## Predict the price of the Uber ride from a given pickup point to the agreed drop-off location.\n",
    "\n",
    "### Perform following tasks:\n",
    "1. Pre-process the dataset.\n",
    "2. Identify outliers.\n",
    "3. Check the correlation.\n",
    "4. Implement linear regression and random forest regression models.\n",
    "5. Evaluate the models and compare their respective scores like R2, RMSE, etc.\n",
    "\n",
    "Dataset link: https://www.kaggle.com/datasets/yasserh/uber-fares-dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aba4b223",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing required libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6679414b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24238194</td>\n",
       "      <td>2015-05-07 19:52:06.0000003</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2015-05-07 19:52:06 UTC</td>\n",
       "      <td>-73.999817</td>\n",
       "      <td>40.738354</td>\n",
       "      <td>-73.999512</td>\n",
       "      <td>40.723217</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>27835199</td>\n",
       "      <td>2009-07-17 20:04:56.0000002</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2009-07-17 20:04:56 UTC</td>\n",
       "      <td>-73.994355</td>\n",
       "      <td>40.728225</td>\n",
       "      <td>-73.994710</td>\n",
       "      <td>40.750325</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>44984355</td>\n",
       "      <td>2009-08-24 21:45:00.00000061</td>\n",
       "      <td>12.9</td>\n",
       "      <td>2009-08-24 21:45:00 UTC</td>\n",
       "      <td>-74.005043</td>\n",
       "      <td>40.740770</td>\n",
       "      <td>-73.962565</td>\n",
       "      <td>40.772647</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25894730</td>\n",
       "      <td>2009-06-26 08:22:21.0000001</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2009-06-26 08:22:21 UTC</td>\n",
       "      <td>-73.976124</td>\n",
       "      <td>40.790844</td>\n",
       "      <td>-73.965316</td>\n",
       "      <td>40.803349</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17610152</td>\n",
       "      <td>2014-08-28 17:47:00.000000188</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2014-08-28 17:47:00 UTC</td>\n",
       "      <td>-73.925023</td>\n",
       "      <td>40.744085</td>\n",
       "      <td>-73.973082</td>\n",
       "      <td>40.761247</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                            key  fare_amount  \\\n",
       "0    24238194    2015-05-07 19:52:06.0000003          7.5   \n",
       "1    27835199    2009-07-17 20:04:56.0000002          7.7   \n",
       "2    44984355   2009-08-24 21:45:00.00000061         12.9   \n",
       "3    25894730    2009-06-26 08:22:21.0000001          5.3   \n",
       "4    17610152  2014-08-28 17:47:00.000000188         16.0   \n",
       "\n",
       "           pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0  2015-05-07 19:52:06 UTC        -73.999817        40.738354   \n",
       "1  2009-07-17 20:04:56 UTC        -73.994355        40.728225   \n",
       "2  2009-08-24 21:45:00 UTC        -74.005043        40.740770   \n",
       "3  2009-06-26 08:22:21 UTC        -73.976124        40.790844   \n",
       "4  2014-08-28 17:47:00 UTC        -73.925023        40.744085   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  \n",
       "0         -73.999512         40.723217                1  \n",
       "1         -73.994710         40.750325                1  \n",
       "2         -73.962565         40.772647                1  \n",
       "3         -73.965316         40.803349                3  \n",
       "4         -73.973082         40.761247                5  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('uber.csv') #Reading CSV file\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0bf608da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0             int64\n",
       "key                   object\n",
       "fare_amount          float64\n",
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count        int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes #Checking Datatypes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "847462b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0           0\n",
       "key                  0\n",
       "fare_amount          0\n",
       "pickup_datetime      0\n",
       "pickup_longitude     0\n",
       "pickup_latitude      0\n",
       "dropoff_longitude    1\n",
       "dropoff_latitude     1\n",
       "passenger_count      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum() #Checking for Null Values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d73d6e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.5</td>\n",
       "      <td>2015-05-07 19:52:06 UTC</td>\n",
       "      <td>-73.999817</td>\n",
       "      <td>40.738354</td>\n",
       "      <td>-73.999512</td>\n",
       "      <td>40.723217</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.7</td>\n",
       "      <td>2009-07-17 20:04:56 UTC</td>\n",
       "      <td>-73.994355</td>\n",
       "      <td>40.728225</td>\n",
       "      <td>-73.994710</td>\n",
       "      <td>40.750325</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.9</td>\n",
       "      <td>2009-08-24 21:45:00 UTC</td>\n",
       "      <td>-74.005043</td>\n",
       "      <td>40.740770</td>\n",
       "      <td>-73.962565</td>\n",
       "      <td>40.772647</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.3</td>\n",
       "      <td>2009-06-26 08:22:21 UTC</td>\n",
       "      <td>-73.976124</td>\n",
       "      <td>40.790844</td>\n",
       "      <td>-73.965316</td>\n",
       "      <td>40.803349</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.0</td>\n",
       "      <td>2014-08-28 17:47:00 UTC</td>\n",
       "      <td>-73.925023</td>\n",
       "      <td>40.744085</td>\n",
       "      <td>-73.973082</td>\n",
       "      <td>40.761247</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount          pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0          7.5  2015-05-07 19:52:06 UTC        -73.999817        40.738354   \n",
       "1          7.7  2009-07-17 20:04:56 UTC        -73.994355        40.728225   \n",
       "2         12.9  2009-08-24 21:45:00 UTC        -74.005043        40.740770   \n",
       "3          5.3  2009-06-26 08:22:21 UTC        -73.976124        40.790844   \n",
       "4         16.0  2014-08-28 17:47:00 UTC        -73.925023        40.744085   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  \n",
       "0         -73.999512         40.723217                1  \n",
       "1         -73.994710         40.750325                1  \n",
       "2         -73.962565         40.772647                1  \n",
       "3         -73.965316         40.803349                3  \n",
       "4         -73.973082         40.761247                5  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(['Unnamed: 0','key'],axis=1,inplace=True) #Dropping first coloumnn as it is irrelevant.\n",
    "df.dropna(axis=0,inplace=True) #Dropping the rows with null values.\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "524b0360",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.5</td>\n",
       "      <td>2015-05-07 19:52:06 UTC</td>\n",
       "      <td>-73.999817</td>\n",
       "      <td>40.738354</td>\n",
       "      <td>-73.999512</td>\n",
       "      <td>40.723217</td>\n",
       "      <td>1</td>\n",
       "      <td>1.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.7</td>\n",
       "      <td>2009-07-17 20:04:56 UTC</td>\n",
       "      <td>-73.994355</td>\n",
       "      <td>40.728225</td>\n",
       "      <td>-73.994710</td>\n",
       "      <td>40.750325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.9</td>\n",
       "      <td>2009-08-24 21:45:00 UTC</td>\n",
       "      <td>-74.005043</td>\n",
       "      <td>40.740770</td>\n",
       "      <td>-73.962565</td>\n",
       "      <td>40.772647</td>\n",
       "      <td>1</td>\n",
       "      <td>5.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.3</td>\n",
       "      <td>2009-06-26 08:22:21 UTC</td>\n",
       "      <td>-73.976124</td>\n",
       "      <td>40.790844</td>\n",
       "      <td>-73.965316</td>\n",
       "      <td>40.803349</td>\n",
       "      <td>3</td>\n",
       "      <td>1.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.0</td>\n",
       "      <td>2014-08-28 17:47:00 UTC</td>\n",
       "      <td>-73.925023</td>\n",
       "      <td>40.744085</td>\n",
       "      <td>-73.973082</td>\n",
       "      <td>40.761247</td>\n",
       "      <td>5</td>\n",
       "      <td>4.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount          pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0          7.5  2015-05-07 19:52:06 UTC        -73.999817        40.738354   \n",
       "1          7.7  2009-07-17 20:04:56 UTC        -73.994355        40.728225   \n",
       "2         12.9  2009-08-24 21:45:00 UTC        -74.005043        40.740770   \n",
       "3          5.3  2009-06-26 08:22:21 UTC        -73.976124        40.790844   \n",
       "4         16.0  2014-08-28 17:47:00 UTC        -73.925023        40.744085   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  Distance  \n",
       "0         -73.999512         40.723217                1      1.68  \n",
       "1         -73.994710         40.750325                1      2.46  \n",
       "2         -73.962565         40.772647                1      5.04  \n",
       "3         -73.965316         40.803349                3      1.66  \n",
       "4         -73.973082         40.761247                5      4.48  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def haversine (lon_1, lon_2, lat_1, lat_2): #Function to find the distance using the coordinates\n",
    "    lon_1, lon_2, lat_1, lat_2 = map(np.radians, [lon_1, lon_2, lat_1, lat_2]) #Converting Degrees to Radians\n",
    "    diff_lon = lon_2 - lon_1\n",
    "    diff_lat = lat_2 - lat_1\n",
    "    distance = 2 * 6371 * np.arcsin(np.sqrt(np.sin(diff_lat/2.0)**2+np.cos(lat_1)*np.cos(lat_2)*np.sin(diff_lon/2.0)**2)) #Calculationg the Distance using Haversine Formula\n",
    "    return distance\n",
    "\n",
    "df['Distance']= haversine(df['pickup_longitude'],df['dropoff_longitude'],df['pickup_latitude'],df['dropoff_latitude'])\n",
    "df['Distance'] = df['Distance'].astype(float).round(2) #Rounding-off to 2 decimals\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "36786888",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'fare_amount')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting a scatter plot to check for outliers.\n",
    "plt.scatter(df['Distance'], df['fare_amount'])\n",
    "plt.xlabel(\"Distance\")\n",
    "plt.ylabel(\"fare_amount\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f67e997e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'fare_amount')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Dealing with Outliers via removing rows with too large Distance and 0 or lesser distance.\n",
    "df.drop(df[df['Distance']>60].index, inplace=True)\n",
    "df.drop(df[df['Distance']==0].index, inplace=True)\n",
    "df.drop(df[df['Distance']<0].index, inplace=True)\n",
    "#Dealing with Outliers via removing rows with 0 or lesser fare amounts.\n",
    "df.drop(df[df['fare_amount']==0].index, inplace=True)\n",
    "df.drop(df[df['fare_amount']<0].index, inplace=True)\n",
    "#Dealing with Outliers via removing rows with non-plausible fare amounts and distance travelled.\n",
    "df.drop(df[df['Distance']>100].index, inplace=True)\n",
    "df.drop(df[df['fare_amount']>100].index, inplace=True)\n",
    "df.drop(df[(df['fare_amount']>100) & (df['Distance']<1)].index, inplace = True )\n",
    "df.drop(df[(df['fare_amount']<100) & (df['Distance']>100)].index, inplace = True )\n",
    "#Plotting a Scatter Plot to check for any more outliers and also to show correlation between Fare Amount and Distance.\n",
    "plt.scatter(df['Distance'], df['fare_amount'])\n",
    "plt.xlabel(\"Distance\")\n",
    "plt.ylabel(\"fare_amount\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1cf60faf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preprocessing the Data Using Standard Scaler in range of -1 to 1\n",
    "x = df['Distance'].values.reshape(-1, 1)        #Independent Variable\n",
    "y = df['fare_amount'].values.reshape(-1, 1)     #Dependent Variable\n",
    "std = StandardScaler()\n",
    "Y = std.fit_transform(y)\n",
    "X = std.fit_transform(x)\n",
    "#Splitting the data into training and testing set\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "882b0547",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_model(model): #Model to print the metrics of the various prediction models\n",
    "    model.fit(X_train,Y_train)\n",
    "    print(\"Training score = \",model.score(X_train,Y_train))\n",
    "    print(\"Testing score = \",model.score(X_test,Y_test))\n",
    "    print(\"Accuracy = \",model.score(X_test,Y_test))\n",
    "    Y_pred = model.predict(X_test)\n",
    "    print(\"Predicted values:\\n\",Y_pred)\n",
    "    print(\"Mean Absolute Error =\", metrics.mean_absolute_error(Y_test, Y_pred))\n",
    "    print(\"Mean Squared Error =\", metrics.mean_squared_error(Y_test, Y_pred))\n",
    "    print(\"Root Mean Squared Error =\", np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1c99e0db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score =  0.8023890708990102\n",
      "Testing score =  0.800134921063358\n",
      "Accuracy =  0.800134921063358\n",
      "Predicted values:\n",
      " [[-0.0856421 ]\n",
      " [ 1.40250073]\n",
      " [ 0.1072653 ]\n",
      " ...\n",
      " [-0.17833787]\n",
      " [-0.42636167]\n",
      " [-0.37124527]]\n",
      "Mean Absolute Error = 0.243543639885431\n",
      "Mean Squared Error = 0.19732734085539588\n",
      "Root Mean Squared Error = 0.44421542167668593\n"
     ]
    }
   ],
   "source": [
    "lr = LinearRegression()\n",
    "apply_model(lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1cf9422a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\candr\\AppData\\Local\\Temp\\ipykernel_7216\\3813684645.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  model.fit(X_train,Y_train)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score =  0.8250567049453948\n",
      "Testing score =  0.7931312012692804\n",
      "Accuracy =  0.7931312012692804\n",
      "Predicted values:\n",
      " [-0.10304075  1.80284551  0.08764113 ... -0.21391608 -0.42011423\n",
      " -0.37785255]\n",
      "Mean Absolute Error = 0.24703500001737674\n",
      "Mean Squared Error = 0.20424213262599705\n",
      "Root Mean Squared Error = 0.4519315574575392\n"
     ]
    }
   ],
   "source": [
    "#Random Forest Model\n",
    "rf = RandomForestRegressor(n_estimators=100, random_state=10)\n",
    "apply_model(rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef4d3f3f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

=======================================================================================================================================================================

2nd:

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c6a69e17",
   "metadata": {},
   "source": [
    "# Classify the email using the binary classification method. \n",
    "## Email Spam detection has two states: \n",
    "    a) Normal State – Not Spam\n",
    "    b) Abnormal State – Spam. \n",
    "Use K-Nearest Neighbors and Support Vector Machine for classification. Analyze their performance.\n",
    "\n",
    "Dataset link: The emails.csv dataset on the Kaggle\n",
    "https://www.kaggle.com/datasets/balaka18/email-spam-classification-dataset-csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1f622335",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import confusion_matrix, classification_report,accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db221406",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Email No.</th>\n",
       "      <th>the</th>\n",
       "      <th>to</th>\n",
       "      <th>ect</th>\n",
       "      <th>and</th>\n",
       "      <th>for</th>\n",
       "      <th>of</th>\n",
       "      <th>a</th>\n",
       "      <th>you</th>\n",
       "      <th>hou</th>\n",
       "      <th>...</th>\n",
       "      <th>connevey</th>\n",
       "      <th>jay</th>\n",
       "      <th>valued</th>\n",
       "      <th>lay</th>\n",
       "      <th>infrastructure</th>\n",
       "      <th>military</th>\n",
       "      <th>allowing</th>\n",
       "      <th>ff</th>\n",
       "      <th>dry</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Email 1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Email 2</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>102</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Email 3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Email 4</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Email 5</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 3002 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Email No.  the  to  ect  and  for  of    a  you  hou  ...  connevey  jay  \\\n",
       "0   Email 1    0   0    1    0    0   0    2    0    0  ...         0    0   \n",
       "1   Email 2    8  13   24    6    6   2  102    1   27  ...         0    0   \n",
       "2   Email 3    0   0    1    0    0   0    8    0    0  ...         0    0   \n",
       "3   Email 4    0   5   22    0    5   1   51    2   10  ...         0    0   \n",
       "4   Email 5    7   6   17    1    5   2   57    0    9  ...         0    0   \n",
       "\n",
       "   valued  lay  infrastructure  military  allowing  ff  dry  Prediction  \n",
       "0       0    0               0         0         0   0    0           0  \n",
       "1       0    0               0         0         0   1    0           0  \n",
       "2       0    0               0         0         0   0    0           0  \n",
       "3       0    0               0         0         0   0    0           0  \n",
       "4       0    0               0         0         0   1    0           0  \n",
       "\n",
       "[5 rows x 3002 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"emails.csv\") #Reading the Dataset\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c1ad4120",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>the</th>\n",
       "      <th>to</th>\n",
       "      <th>ect</th>\n",
       "      <th>and</th>\n",
       "      <th>for</th>\n",
       "      <th>of</th>\n",
       "      <th>a</th>\n",
       "      <th>you</th>\n",
       "      <th>hou</th>\n",
       "      <th>in</th>\n",
       "      <th>...</th>\n",
       "      <th>connevey</th>\n",
       "      <th>jay</th>\n",
       "      <th>valued</th>\n",
       "      <th>lay</th>\n",
       "      <th>infrastructure</th>\n",
       "      <th>military</th>\n",
       "      <th>allowing</th>\n",
       "      <th>ff</th>\n",
       "      <th>dry</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>24</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>102</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 3001 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   the  to  ect  and  for  of    a  you  hou  in  ...  connevey  jay  valued  \\\n",
       "0    0   0    1    0    0   0    2    0    0   0  ...         0    0       0   \n",
       "1    8  13   24    6    6   2  102    1   27  18  ...         0    0       0   \n",
       "2    0   0    1    0    0   0    8    0    0   4  ...         0    0       0   \n",
       "3    0   5   22    0    5   1   51    2   10   1  ...         0    0       0   \n",
       "4    7   6   17    1    5   2   57    0    9   3  ...         0    0       0   \n",
       "\n",
       "   lay  infrastructure  military  allowing  ff  dry  Prediction  \n",
       "0    0               0         0         0   0    0           0  \n",
       "1    0               0         0         0   1    0           0  \n",
       "2    0               0         0         0   0    0           0  \n",
       "3    0               0         0         0   0    0           0  \n",
       "4    0               0         0         0   1    0           0  \n",
       "\n",
       "[5 rows x 3001 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(columns=['Email No.'], inplace=True) #Dropping Email No. as it is irrelevant.\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f0b24581",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the Dataset\n",
    "X=df.iloc[:, :df.shape[1]-1]\n",
    "Y=df.iloc[:, -1]\n",
    "X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.20, random_state=8) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a2a38bda",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_model(model):#Model to print the scores of various models\n",
    "    model.fit(X_train,Y_train)\n",
    "    print(\"Training score = \",model.score(X_train,Y_train))\n",
    "    print(\"Testing score = \",model.score(X_test,Y_test))\n",
    "    print(\"Accuracy = \",model.score(X_test,Y_test))\n",
    "    Y_pred = model.predict(X_test)\n",
    "    print(\"Predicted values:\\n\",Y_pred)\n",
    "    print(\"Confusion Matrix:\\n\",confusion_matrix(Y_test,Y_pred))\n",
    "    print(\"Classification Report:\\n\",classification_report(Y_test,Y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7b9cdd23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score =  0.883248730964467\n",
      "Testing score =  0.8695652173913043\n",
      "Accuracy =  0.8695652173913043\n",
      "Predicted values:\n",
      " [0 0 0 ... 0 0 0]\n",
      "Confusion Matrix:\n",
      " [[653  73]\n",
      " [ 62 247]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.90      0.91       726\n",
      "           1       0.77      0.80      0.79       309\n",
      "\n",
      "    accuracy                           0.87      1035\n",
      "   macro avg       0.84      0.85      0.85      1035\n",
      "weighted avg       0.87      0.87      0.87      1035\n",
      "\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=17) #KNN Model\n",
    "apply_model(knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c3712b36",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\candr\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:284: ConvergenceWarning: Solver terminated early (max_iter=10000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score =  0.9951655789219241\n",
      "Testing score =  0.9671497584541063\n",
      "Accuracy =  0.9671497584541063\n",
      "Predicted values:\n",
      " [0 1 0 ... 1 0 0]\n",
      "Confusion Matrix:\n",
      " [[710  16]\n",
      " [ 18 291]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98       726\n",
      "           1       0.95      0.94      0.94       309\n",
      "\n",
      "    accuracy                           0.97      1035\n",
      "   macro avg       0.96      0.96      0.96      1035\n",
      "weighted avg       0.97      0.97      0.97      1035\n",
      "\n"
     ]
    }
   ],
   "source": [
    "svm = SVC(kernel='linear',random_state=3,max_iter=10000) #SVM Model\n",
    "apply_model(svm)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

==========================================================================================================================================================================
4th:

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a5ffc597",
   "metadata": {},
   "source": [
    "# LP3 Group B Assignment 4\n",
    "## Implement Gradient Descent Algorithm to find the local minima of a function. \n",
    "### For example, find the local minima of the function y=(x+3)² starting from the point x=2 ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ce43769",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration1:Cost4352.088931274409,Weight\\0.7593291142562117,Bias0.02288558130709\n",
      "Iteration2:Cost1114.8561474350017,Weight\\1.081602958862324,Bias0.02918014748569513\n",
      "Iteration3:Cost341.42912086804455,Weight\\1.2391274084945083,Bias0.03225308846928192\n",
      "Iteration4:Cost156.64495290904443,Weight\\1.3161239281746984,Bias0.03375132986012604\n",
      "Iteration5:Cost112.49704004742098,Weight\\1.3537591652024805,Bias0.034479873154934775\n",
      "Iteration6:Cost101.9493925395456,Weight\\1.3721549833978113,Bias0.034832195392868505\n",
      "Iteration7:Cost99.4293893333546,Weight\\1.3811467575154601,Bias0.03500062439068245\n",
      "Iteration8:Cost98.82731958262897,Weight\\1.3855419247507244,Bias0.03507916814736111\n",
      "Iteration9:Cost98.68347500997261,Weight\\1.3876903144657764,Bias0.035113776874486774\n",
      "Iteration10:Cost98.64910780902792,Weight\\1.3887405007983562,Bias0.035126910596389935\n",
      "Iteration11:Cost98.64089651459352,Weight\\1.389253895811451,Bias0.03512954755833985\n",
      "Iteration12:Cost98.63893428729509,Weight\\1.38950491235671,Bias0.035127053821718185\n",
      "Iteration13:Cost98.63846506273883,Weight\\1.3896276808137857,Bias0.035122052266051224\n",
      "Iteration14:Cost98.63835254057648,Weight\\1.38968776283053,Bias0.03511582492978764\n",
      "Iteration15:Cost98.63832524036214,Weight\\1.3897172043139192,Bias0.03510899846107016\n",
      "Iteration16:Cost98.63831830104695,Weight\\1.389731668997059,Bias0.035101879159522745\n",
      "Iteration17:Cost98.63831622628217,Weight\\1.389738813163012,Bias0.03509461674147458\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated Weight: 1.389738813163012\n",
      "Estimated Bias: 0.03509461674147458\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    " \n",
    "def mean_squared_error(y_true, y_predicted):\n",
    "    cost = np.sum((y_true-y_predicted)**2) / len(y_true) #Calculating the loss or cost\n",
    "    return cost\n",
    " \n",
    "def gradient_descent(x, y, iterations = 1000, learning_rate = 0.0001, stopping_threshold = 1e-6): #Gradient Descent Function\n",
    "    #Initializing weight, bias, learning rate and iterations\n",
    "    current_weight = 0.1\n",
    "    current_bias = 0.01\n",
    "    iterations = iterations\n",
    "    learning_rate = learning_rate\n",
    "    n = float(len(x))\n",
    "    costs = []\n",
    "    weights = []\n",
    "    previous_cost = None\n",
    "    \n",
    "    for i in range(iterations): #Estimation of optimal parameters\n",
    "        y_predicted = (current_weight * x) + current_bias #Making predictions\n",
    "        current_cost = mean_squared_error(y, y_predicted) #Calculationg the current cost\n",
    "        #If the change in cost is less than or equal to stopping_threshold we stop the gradient descent\n",
    "        if previous_cost and abs(previous_cost-current_cost)<=stopping_threshold:\n",
    "            break\n",
    "        previous_cost = current_cost\n",
    "        costs.append(current_cost)\n",
    "        weights.append(current_weight)\n",
    "        #Calculating the gradients\n",
    "        weight_derivative = -(2/n) * sum(x * (y-y_predicted))  \n",
    "        bias_derivative = -(2/n) * sum(y-y_predicted)\n",
    "        #Updating weights and bias\n",
    "        current_weight = current_weight - (learning_rate * weight_derivative)\n",
    "        current_bias = current_bias - (learning_rate * bias_derivative)        \n",
    "        #Printing the parameters for each 1000th iteration\n",
    "        print(f\"Iteration{i+1}:Cost{current_cost},Weight\\{current_weight},Bias{current_bias}\")\n",
    "    #Visualizing the weights and cost at for all iterations\n",
    "    plt.figure(figsize = (8,6))\n",
    "    plt.plot(weights, costs)\n",
    "    plt.scatter(weights, costs, marker='o', color='red')\n",
    "    plt.title(\"Cost vs Weights\")\n",
    "    plt.ylabel(\"Cost\")\n",
    "    plt.xlabel(\"Weight\")\n",
    "    plt.show()\n",
    "    return current_weight, current_bias\n",
    "\n",
    "#Data\n",
    "X = np.array([32.50234527, 53.42680403, 61.53035803, 47.47563963, 59.81320787,\n",
    "           55.14218841, 52.21179669, 39.29956669, 48.10504169, 52.55001444,\n",
    "           45.41973014, 54.35163488, 44.1640495 , 58.16847072, 56.72720806,\n",
    "           48.95588857, 44.68719623, 60.29732685, 45.61864377, 38.81681754])\n",
    "Y = np.array([31.70700585, 68.77759598, 62.5623823 , 71.54663223, 87.23092513,\n",
    "           78.21151827, 79.64197305, 59.17148932, 75.3312423 , 71.30087989,\n",
    "           55.16567715, 82.47884676, 62.00892325, 75.39287043, 81.43619216,\n",
    "           60.72360244, 82.89250373, 97.37989686, 48.84715332, 56.87721319])\n",
    " \n",
    "#Estimating weight and bias using gradient descent\n",
    "estimated_weight, eatimated_bias = gradient_descent(X, Y, iterations=2000)\n",
    "print(f\"Estimated Weight: {estimated_weight}\\nEstimated Bias: {eatimated_bias}\")\n",
    "Y_pred = estimated_weight*X + eatimated_bias #Making predictions using estimated parameters\n",
    "#Plotting the regression line\n",
    "plt.figure(figsize = (8,6))\n",
    "plt.scatter(X, Y, marker='o', color='red')\n",
    "plt.plot([min(X), max(X)], [min(Y_pred), max(Y_pred)], color='blue',markerfacecolor='red',markersize=10,linestyle='dashed')\n",
    "plt.xlabel(\"X\")\n",
    "plt.ylabel(\"Y\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee083f1e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}


=======================================================================================================================================================================

5th:

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dc994e84",
   "metadata": {},
   "source": [
    "# LP3 Group B Assignment 5\n",
    "## Implement K-Nearest Neighbors algorithm on diabetes.csv dataset. Compute confusion matrix, accuracy, error rate, precision and recall on the given dataset.\n",
    "Dataset link : https://www.kaggle.com/datasets/abdallamahgoub/diabetes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb13b804",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3ec6fa1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Pedigree</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   Pedigree  Age  Outcome  \n",
       "0     0.627   50        1  \n",
       "1     0.351   31        0  \n",
       "2     0.672   32        1  \n",
       "3     0.167   21        0  \n",
       "4     2.288   33        1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"diabetes.csv\") #Reading the Dataset\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7fb599b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pregnancies        int64\n",
       "Glucose            int64\n",
       "BloodPressure      int64\n",
       "SkinThickness      int64\n",
       "Insulin            int64\n",
       "BMI              float64\n",
       "Pedigree         float64\n",
       "Age                int64\n",
       "Outcome            int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "14fbeb12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Pedigree</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness     Insulin   BMI  \\\n",
       "0            6    148.0           72.0      35.000000   79.799479  33.6   \n",
       "1            1     85.0           66.0      29.000000   79.799479  26.6   \n",
       "2            8    183.0           64.0      20.536458   79.799479  23.3   \n",
       "3            1     89.0           66.0      23.000000   94.000000  28.1   \n",
       "4            0    137.0           40.0      35.000000  168.000000  43.1   \n",
       "\n",
       "   Pedigree  Age  Outcome  \n",
       "0     0.627   50        1  \n",
       "1     0.351   31        0  \n",
       "2     0.672   32        1  \n",
       "3     0.167   21        0  \n",
       "4     2.288   33        1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Glucose\"].replace(0,df[\"Glucose\"].mean(), inplace=True)\n",
    "df[\"BloodPressure\"].replace(0,df[\"BloodPressure\"].mean(), inplace=True)\n",
    "df[\"SkinThickness\"].replace(0,df[\"SkinThickness\"].mean(), inplace=True)\n",
    "df[\"Insulin\"].replace(0,df[\"Insulin\"].mean(), inplace=True)\n",
    "df[\"BMI\"].replace(0,df[\"BMI\"].mean(), inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f8db7688",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.iloc[:, :8]\n",
    "Y = df.iloc[:, 8:]\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.20,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "089e6478",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_model(model):#Model to print the scores of various models\n",
    "    model.fit(X_train,Y_train)\n",
    "    print(\"Training score = \",model.score(X_train,Y_train))\n",
    "    print(\"Testing score = \",model.score(X_test,Y_test))\n",
    "    print(\"Accuracy = \",model.score(X_test,Y_test))\n",
    "    Y_pred = model.predict(X_test)\n",
    "    print(\"Predicted values:\\n\",Y_pred)\n",
    "    print(\"Confusion Matrix:\\n\",confusion_matrix(Y_test,Y_pred))\n",
    "    print(\"Classification Report:\\n\",classification_report(Y_test,Y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "442015b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score =  0.7915309446254072\n",
      "Testing score =  0.7597402597402597\n",
      "Accuracy =  0.7597402597402597\n",
      "Predicted values:\n",
      " [1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 1\n",
      " 0 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1\n",
      " 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0\n",
      " 0 1 0 1 1 0 1 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0\n",
      " 0 0 0 0 0 0]\n",
      "Confusion Matrix:\n",
      " [[89 18]\n",
      " [19 28]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.83      0.83       107\n",
      "           1       0.61      0.60      0.60        47\n",
      "\n",
      "    accuracy                           0.76       154\n",
      "   macro avg       0.72      0.71      0.72       154\n",
      "weighted avg       0.76      0.76      0.76       154\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\candr\\anaconda3\\lib\\site-packages\\sklearn\\neighbors\\_classification.py:198: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  return self._fit(X, y)\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=5) #KNN Model\n",
    "apply_model(knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f63cd23",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

=======================================================================================================================================================================



